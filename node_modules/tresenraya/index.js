const EventEmitter = require('events');


module.exports = class extends EventEmitter {
    
    constructor(opciones = { fichas: [ '❌', '⭕' ], jugadores: [ 'Jugador 1', 'Jugador 2' ], tablero: [ '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣' ] }) {
      
      super();

      if(!opciones.fichas) opciones.fichas = [ '❌', '⭕' ];
      if(!opciones.jugadores) opciones.jugadores = [ 'Jugador 1', 'Jugador 2' ];
      if(!opciones.tablero) opciones.tablero = [ '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣' ];
      
      /*if(!opciones.fichas) throw new Error('Debes especificar las fichas que se usarán en la partida (en las opciones)');
      if(!opciones.jugadores) throw new Error('Debes especificar el nombre de los jugadores (en las opciones)');*/

      if(Object.entries(opciones).filter(x => ['fichas', 'jugadores', 'tablero'].includes(x[0])).some(x => !(x[1] instanceof Array))) {

          const opcion = Object.entries(opciones).filter(x => ['fichas', 'jugadores', 'tablero'].includes(x[0])).find(x => !(x[1] instanceof Array))[0];
          throw new TypeError('No has introducido un Array en \'opciones.' + opcion + '\'');
          return false;

      }

      if(!opciones.fichas[1]) throw new TypeError('Debes introducir dos valores en el array de fichas.');
      if(opciones.fichas.slice(0, 2).some(x => typeof(x) !== 'string')) throw new TypeError('Algún valor de algún elemento del Array de fichas no es un String.');

      if(opciones.fichas[0].toLowerCase() == opciones.fichas[1].toLowerCase()) {

          const arrayString = (JSON.stringify(opciones.fichas)).split(',').join(', ');
          throw new TypeError('Los valores de los elementos del array de fichas (' + arrayString + ') son iguales, deben ser diferentes.');
          return false;

      }

      if(!opciones.jugadores[1]) throw new TypeError('Debes introducir dos valores en el array de jugadores.');
      if(opciones.jugadores.slice(0, 2).some(x => typeof(x) !== 'string')) throw new TypeError('Algún valor de algún elemento del Array de jugadores no es un String.');

      if(opciones.jugadores[0].toLowerCase() == opciones.jugadores[1].toLowerCase()) {

          const arrayString = (JSON.stringify(opciones.jugadores)).split(',').join(', ');
          throw new TypeError('Los valores de los elementos del array de jugadores (' + arrayString + ') son iguales, deben ser diferentes.');
          return false;

      }

      if(!opciones.tablero[8]) throw new TypeError('Debes introducir nueve valores en el array tablero.');
      if(opciones.tablero.slice(0, 9).some(x => typeof(x) !== 'string')) throw new TypeError('Algún valor de algún elemento del Array tablero no es un String.');

      opciones.fichas = opciones.fichas.slice(0, 2);
      opciones.jugadores = opciones.jugadores.slice(0, 2);
      opciones.tablero = opciones.tablero.slice(0, 9);

      this.opciones = opciones;
      this.tablero = { array: opciones.tablero, string: (opciones.tablero.slice(0, 3).join(' ') + '\n' + opciones.tablero.slice(3, 6).join(' ') + '\n' + opciones.tablero.slice(6, 9)) };
      this.turno = { jugador: (opciones.jugadores[Math.floor(Math.random() * 2)]), paso: 0 };
      this.turno.ficha = this.opciones.fichas[this.opciones.jugadores.indexOf(this.turno.jugador)];
      this.perdedor = null;
      this.finalizado = false;
            
    }

    elegir(pos) {

      if(this.finalizado) return false;//throw new Error('¡La partida ya ha finalizado!');
      
      if(!pos) throw new Error('Debes especificar la posición en la que quieres que se añada la ficha (del 1 al 9)');
      if(isNaN(pos) || (Number(pos) < 1 || Number(pos) > 9)) throw new TypeError(pos + ' no es un número válido (debes introducir un número del 1 al 9)');

      if(this.opciones.fichas.includes(this.tablero.array[pos-1])) throw new Error('Ya hay una ficha posicionada en la posición ' + pos + ' del tablero. Recuerda usar el método llamado "disponible" para comprobar si ya hay una ficha posicionada en esa posición del tablero.');

      this.turno.paso++;
      this.tablero.array[pos-1] = this.opciones.fichas[this.opciones.jugadores.indexOf(this.turno.jugador)];
      this.tablero.string = this.tablero.array.slice(0, 3).join(' ') + '\n' + this.tablero.array.slice(3, 6).join(' ') + '\n' + this.tablero.array.slice(6, 9).join(' ');

      const selecciones = [
        [ 0, 1, 2 ],
        [ 3, 4, 5 ],
        [ 6, 7, 8 ],
        [ 0, 3, 6 ],
        [ 1, 4, 7 ],
        [ 2, 5, 8 ],
        [ 0, 4, 8 ],
        [ 2, 4, 6 ]
      ];
      
      if(selecciones.some(x => !x.some(p => this.opciones.fichas[this.opciones.jugadores.indexOf(this.turno.jugador)] != (this.tablero.array[p])))) {
        
        this.perdedor = this.opciones.jugadores.find(x => x != this.turno.jugador);
        this.emit('ganador', this.turno.jugador, this.tablero, this.turno.paso);
        this.finalizado = true;
        return;
        
      }
      
      let n = 0;
      
      this.tablero.array.forEach(p => {
        
        if(this.opciones.fichas.includes(p)) {
          n++;
        }
        
      });
      
      if(n >= 9) {
        
        this.emit('empate', this.opciones.jugadores, this.tablero, this.turno.paso);
        this.finalizado = true;
        return;
        
      }
      
      this.turno.jugador = this.opciones.jugadores.find(x => x != this.turno.jugador);
      this.turno.ficha = this.opciones.fichas[this.opciones.jugadores.indexOf(this.turno.jugador)];

    }

    disponible(pos) {
      
      if(!pos) throw new Error('Debes especificar la posición en la que quieres verificar si está disponible para posicionar una ficha (número del 1 al 9)');
      if(isNaN(pos) || (Number(pos) < 1 || Number(pos) > 9)) throw new TypeError(pos + ' no es un número válido (debes introducir un número del 1 al 9)');
      
      return !(this.opciones.fichas.includes(this.tablero.array[pos-1]));

    }
  
    finalizar() {
      
      if(this.finalizado) return false;
      
      this.finalizado = true;
      
      this.emit('finalizado', this.opciones.jugadores, this.tablero, this.turno);
      
      return true;
      
    }

    pasar() {

      if(this.finalizado) throw new Error('La partida ha finalizado, no se puede pasar a otro turno.');//throw new Error('¡La partida ya ha finalizado!');
      
      this.turno.paso++;
      
      this.turno.jugador = this.opciones.jugadores.find(x => x != this.turno.jugador);
      this.turno.ficha = this.opciones.fichas[this.opciones.jugadores.indexOf(this.turno.jugador)];
      
      return true;

    }
  
}